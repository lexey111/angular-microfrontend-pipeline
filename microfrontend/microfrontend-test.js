const path = require('path');
const fs = require('fs');
const {execSync} = require('child_process');

const base = path.resolve(__dirname); // folder of this file, 'microfrontend'
const summaryReport = path.resolve(base, 'test.summary.spec.js');

function prepareReport() {
	if (fs.existsSync(summaryReport)) {
		fs.unlinkSync(summaryReport);
	}
	const time = new Date().toString();
	const content = `// autogenerated file
describe('Microfrontend Summary', () => {
	it('Should display time ${time}', () => {
		expect('${time}').toEqual('${time}');
	});
	it('Should fail (pre-start)', () => {
		expect(false).toEqual('Microfrontend test passed');
	});
});`;
	fs.writeFileSync(summaryReport, content, {encoding: 'utf8'});
}

function getMicrofrontendProjects() {
	return fs.readdirSync(base, {withFileTypes: true})
		.filter(dirent => dirent.isDirectory())
		.filter(dirent => fs.existsSync(path.resolve(base, dirent.name, 'package.json')))
		.map(dirent => dirent.name)
}

function MicrofrontendKarma() {
	console.log();
	console.log('Karma extension injected:', base);
	prepareReport(); // write empty report with error message

	const tests = [];
	getMicrofrontendProjects().forEach(folder => {
		const projectName = path.basename(folder);
		console.log('Testing:', projectName);
		const log = path.join(base, folder + '.out');

		try {
			// run npm test and redirect output to file
			execSync(`npm run test 2>&1 | tee ${log}`, {
				cwd: path.resolve(base, folder),
				stdio: 'inherit'
			});

			let stat = '';
			if (fs.existsSync(log)) {
				const content = (fs.readFileSync(log).toString() || '').split('\n');
				fs.unlinkSync(log);

				const failedAt = content.find(line => line.toString().startsWith('FAIL'));
				if (failedAt) {
					throw new Error(failedAt)
				}
				const result = content.find(line => line.toString().startsWith('Tests:'));
				if (result) {
					stat = '- ' + result.replace('Tests:', '').trim();
				}
			}
			if (!stat) {
				stat = ' (result unknown)';
			}

			tests.push(`
	it('Package "${projectName}" ${stat}', () => {
		expect('${projectName}').toBe('${projectName}'); // fake pass
	});`);
		} catch (err) {
			console.log();
			console.log(`ERROR on testing ${projectName}`);
			tests.push(`
			it('Should pass "${projectName}" ${err.message || 'Error.'}', () => {
		expect('${projectName}').toBe('passed');
	});`);
		}
	});

	const report = `describe('Microfrontend Summary', () => {
	${tests.join('\n')}
});`

	fs.writeFileSync(summaryReport, report);
}

module.exports = MicrofrontendKarma;
